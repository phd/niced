#!/usr/bin/python3
# -*- coding: utf-8 -*-

''' niced - a daemon renicing new and existing processes '''

# Copyright (C) 2023 Piotr Henryk Dabrowski <phd@phd.re>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=superfluous-parens
# pylint: disable=too-few-public-methods

import argparse
import math
import pdb
import re
import signal
import subprocess
import sys
import threading
import time

import psutil

PROGRAM = 'niced'
VERSION = '1.0.0'

VERBOSE_SILENT             = -2
VERBOSE_QUIET              = -1
VERBOSE_DEFAULT            = 0
VERBOSE_YES                = 1
VERBOSE_VERY               = 2
VERBOSE_DEBUG              = 3

DEFAULT_CONFIG_PATH        = '/etc/niced.conf'
DEFAULT_FULL_SCAN_INTERVAL = 10
DEFAULT_VERBOSE            = VERBOSE_DEFAULT

NICE_DEFAULT_PRIORITY      = 10  # see nice(1)

IONICE_CLASS_NONE          = 0   # see ionice(1)
IONICE_CLASS_REALTIME      = 1
IONICE_CLASS_BEST_EFFORT   = 2
IONICE_CLASS_IDLE          = 3

def noop(*args, **kwargs):
    ''' noop function '''
    del args, kwargs

def eprint(*args, **kwargs):
    ''' print() to stderr '''
    print(*args, file=sys.stderr, **kwargs)

class ConfigRuleAction:
    ''' actions available for configuration rules '''
    IGNORECASE     = 'I'
    FORCED         = 'F'
    RECURSIVE      = 'R'  # range:     1...    , None = inf
    NICE           = 'n'  # range:   -20...19  , None =  10
    IO_REALTIME    = 'r'  # range:     0...7   , None =   4
    IO_BEST_EFFORT = 'b'  # range:     0...7   , None =   4
    IO_IDLE        = 'i'
    OOM_ADJ        = 'o'  # range:   -17...15  , None =   0
    OOM_SCORE_ADJ  = 'O'  # range: -1000...1000, None =   0

class ConfigRule():
    ''' parsed configuration line '''
    # pylint: disable=too-many-instance-attributes
    pattern    = None
    regex      = None
    ignorecase = None
    forced     = None
    recursive  = None
    nice       = None
    io_class   = None
    io_nice    = None
    oom        = None
    def __str__(self):
        return (
            'ConfigRule(\n'
            f'       pattern={self.pattern      }\n'
            f'         regex={self.regex.pattern}\n'
            f'    ignorecase={self.ignorecase   }\n'
            f'        forced={self.forced       }\n'
            f'     recursive={self.recursive    }\n'
            f'          nice={self.nice         }\n'
            f'      io_class={self.io_class     }\n'
            f'       io_nice={self.io_nice      }\n'
            f'           oom={self.oom          }\n'
            ')'
        )
    def matches(self, process_entry):
        ''' check if rule matches ProcessEntry or its parents if recursive '''
        if (self.regex.match(process_entry.command)):
            return True
        if (self.recursive):
            try:
                rec_proc = psutil.Process(process_entry.pid).parent()
                rec = self.recursive
                while (rec_proc and rec):
                    rec_process_entry = ProcessEntry.from_process(rec_proc)
                    if (self.regex.match(rec_process_entry.command)):
                        return True
                    rec_proc = rec_proc.parent()
                    rec -= 1
            except psutil.NoSuchProcess:
                return False
            except Exception as exception:
                log()(exception)
                return False
        return False
    @staticmethod
    def from_config_line(line):
        ''' create ConfigRule by parsing given configuration line '''
        rule = ConfigRule()
        line = re.sub('\\s+', ' ', line)
        items = line.split(' ', maxsplit = 1)
        actions_str = items[0]
        actions_str = re.sub('([^,0-9-])', ',\\1', actions_str)
        actions = actions_str.split(',')
        actions = list(filter(None, actions))
        actions = [[action[0], action[1:]] for action in actions]
        for action in actions:
            match (action[0]):
                case ConfigRuleAction.IGNORECASE:
                    rule.ignorecase = True
                case ConfigRuleAction.FORCED:
                    rule.forced = True
                case ConfigRuleAction.RECURSIVE:
                    rule.recursive = int_or_none(action[1]) or math.inf
                case ConfigRuleAction.NICE | '':
                    rule.nice = int_or_none(action[1])
                    if (rule.nice is None):
                        rule.nice = NICE_DEFAULT_PRIORITY
                case ConfigRuleAction.IO_REALTIME:
                    rule.io_class = IONICE_CLASS_REALTIME
                    rule.io_nice = int_or_none(action[1])
                case ConfigRuleAction.IO_BEST_EFFORT:
                    rule.io_class = IONICE_CLASS_BEST_EFFORT
                    rule.io_nice = int_or_none(action[1])
                case ConfigRuleAction.IO_IDLE:
                    rule.io_class = IONICE_CLASS_IDLE
                    rule.io_nice = int_or_none(action[1])
                case ConfigRuleAction.OOM_ADJ:
                    rule.oom = int_or_none(action[1])
                case ConfigRuleAction.OOM_SCORE_ADJ:
                    rule.oom = int_or_none(action[1])
                    if rule.oom is not None:
                        rule.oom = float(rule.oom)
        rule.pattern = items[1]
        pattern = rule.pattern
        if (not pattern.startswith('(') and not pattern.startswith('^')):
            pattern = '(^|[^\\s]*/)' + pattern + '(\\s|$)'
        flags = 0
        if (rule.ignorecase):
            flags |= re.IGNORECASE
        rule.regex = re.compile(pattern, flags)
        return rule

class Config():
    ''' config singleton '''
    path               = DEFAULT_CONFIG_PATH
    rules              = []
    full_scan_interval = DEFAULT_FULL_SCAN_INTERVAL
    verbose            = DEFAULT_VERBOSE
    @staticmethod
    def load():
        ''' method loading configuration from config file '''
        try:
            with open(Config.path, mode = 'r', encoding = 'utf8') as conffile:
                for line in conffile:
                    line = line.strip()
                    if (line[0] == '#'):
                        continue
                    if (line[0] == '@'):
                        line = line[1:].strip()
                        split = re.split('\\s*=\\s*', line, maxsplit = 1)
                        items = dict(enumerate(split))
                        try:
                            attribute = items.get(0, None)
                            if (attribute):
                                setattr(Config, attribute, items.get(1, True))
                        except Exception:
                            pass
                        continue
                    rule = ConfigRule.from_config_line(line)
                    Config.rules.append(rule)
        except Exception:
            log()(f'Failed to load configuration file: {Config.path}')
            sys.exit(1)
        log(VERBOSE_YES)(f'Loaded configuration file: {Config.path}')
    @staticmethod
    def verbosity(level):
        ''' return true if verbosity is set to as least the given level '''
        return (int(Config.verbose) >= level)

class ForkstatEntry():
    ''' parsed process line from forkstat '''
    valid    = False
    time     = None
    event    = None
    pid      = None
    info     = None
    duration = None
    command  = None
    def __str__(self):
        return (
            'ForkstatEntry(\n'
            f'        time={self.time    }\n'
            f'       event={self.event   }\n'
            f'         pid={self.pid     }\n'
            f'        info={self.info    }\n'
            f'    duration={self.duration}\n'
            f'     command={self.command }\n'
            ')'
        )
    @staticmethod
    def from_forkstat_line(line):
        ''' create ForkstatEntry by parsing a process line from forkstat '''
        line = re.sub('\\s+', ' ', line)
        items = line.split(' ')
        forkstat_entry = ForkstatEntry()
        if (not re.match('[0-9]+:[0-9]+:[0-9]+', items[0])):
            return forkstat_entry
        forkstat_entry.valid = False
        forkstat_entry.time  = items[0]
        forkstat_entry.event = items[1]
        forkstat_entry.pid   = int_or_none(items[2])
        match (forkstat_entry.event):
            case 'clone':
                forkstat_entry.info     = items[3]
                forkstat_entry.duration = None
                forkstat_entry.command  = ' '.join(items[4:])
                forkstat_entry.valid    = (forkstat_entry.info == 'thread')
            case 'comm':
                forkstat_entry.info     = None
                forkstat_entry.duration = None
                forkstat_entry.command  = ' '.join(items[3:])
                forkstat_entry.valid    = False
            case 'exec':
                forkstat_entry.info     = None
                forkstat_entry.duration = None
                forkstat_entry.command  = ' '.join(items[3:])
                forkstat_entry.valid    = True
            case 'exit':
                forkstat_entry.info     = items[3]
                forkstat_entry.duration = items[4]
                forkstat_entry.command  = ' '.join(items[5:])
                forkstat_entry.valid    = False
            case 'fork':
                forkstat_entry.info     = items[3]
                forkstat_entry.duration = None
                forkstat_entry.command  = ' '.join(items[4:])
                forkstat_entry.valid    = False
        return forkstat_entry

class Forkstat():
    ''' forkstat subprocess '''
    _process = None
    @staticmethod
    def start():
        ''' start forkstat subprocess in the background '''
        # pylint: disable=consider-using-with
        Forkstat._process = subprocess.Popen(
            ['forkstat', '-l', '-e', 'clone,exec,fork,exit'],
            stdout = subprocess.PIPE
        )
    @staticmethod
    def next_entry():
        ''' wait for the next forkstat process line and parse it '''
        if (Forkstat._process is None):
            return None
        if (Forkstat._process.poll() is not None):
            return None
        line = Forkstat._process.stdout.readline().decode('UTF-8').rstrip()
        return ForkstatEntry.from_forkstat_line(line)

class ProcessEntry():
    ''' contains information about a process '''
    pid     = None
    command = None
    def __init__(self, pid = None, command = None):
        self.pid     = pid
        self.command = command
    def __hash__(self):
        return self.pid
    def __str__(self):
        return (
            'ProcessEntry(\n'
            f'        pid={self.pid    }\n'
            f'    command={self.command}\n'
            ')'
        )
    @staticmethod
    def from_process(proc):
        ''' create ProcessEntry from psutil.Process '''
        return ProcessEntry(proc.pid, ' '.join(proc.cmdline()))
    @staticmethod
    def from_forkstat_entry(forkstat_entry):
        ''' create ProcessEntry from ForkstatEntry '''
        return ProcessEntry(forkstat_entry.pid, forkstat_entry.command)

class Processor():
    ''' main loop matching and renicing processes '''
    _lock = threading.Lock()
    _processed = set()
    @staticmethod
    def run():
        ''' run main loop, it exits if forkstat dies '''
        Forkstat.start()
        while True:
            forkstat_entry = Forkstat.next_entry()
            if (forkstat_entry is None):
                break
            if (forkstat_entry.event == 'exit'):
                Processor.handle_process_exit(forkstat_entry.pid)
                continue
            if (not forkstat_entry.valid):
                continue
            process_entry = ProcessEntry.from_forkstat_entry(forkstat_entry)
            Processor.handle_process_entry(process_entry)
    @staticmethod
    def cleanup_dead(existing_pids):
        ''' remove finished processes from _processed set '''
        with Processor._lock:
            for process_entry in Processor._processed.copy():
                if (process_entry.pid not in existing_pids):
                    log(VERBOSE_VERY)(
                        'dead('
                        f'{process_entry.pid}'
                        f', {process_entry.command}'
                        ')'
                    )
                    Processor._processed.remove(process_entry)
            log(VERBOSE_DEBUG)(
                f'{len(Processor._processed)} processes on the list'
            )
    @staticmethod
    def handle_process_exit(pid):
        ''' remove a finished process from _processed set '''
        with Processor._lock:
            for process_entry in Processor._processed.copy():
                if (process_entry.pid == pid):
                    log(VERBOSE_VERY)(
                        'exit('
                        f'{process_entry.pid}'
                        f', {process_entry.command}'
                        ')'
                    )
                    Processor._processed.remove(process_entry)
                    break
    @staticmethod
    def handle_process_entry(process_entry):
        ''' match and renice given ProcessEntry '''
        with Processor._lock:
            already_processed = next(
                (
                    True
                    for processed in Processor._processed
                    if processed.pid == process_entry.pid
                ),
                False
            )
            matches_any_rule = False
            for rule in Config.rules:
                if (already_processed and not rule.forced):
                    continue
                if (rule.matches(process_entry)):
                    matches_any_rule = True
                    if (rule.nice is not None):
                        log(VERBOSE_DEFAULT)(
                            'nice('
                            f'[{rule.nice}]'
                            f', {process_entry.pid}'
                            f', {process_entry.command}'
                            ')'
                        )
                        Processor.nice(
                            process_entry.pid, rule.nice
                        )
                    if (rule.io_class is not None):
                        log(VERBOSE_DEFAULT)(
                            'ionice('
                            f'[{rule.io_class}, {rule.io_nice}]'
                            f', {process_entry.pid}'
                            f', {process_entry.command}'
                            ')'
                        )
                        Processor.ionice(
                            process_entry.pid, rule.io_class, rule.io_nice
                        )
                    if (rule.oom is not None):
                        log(VERBOSE_DEFAULT)(
                            'oom('
                            f'[{rule.oom}]'
                            f', {process_entry.pid}'
                            f', {process_entry.command}'
                            ')'
                        )
                        Processor.oom(
                            process_entry.pid, rule.oom
                        )
            if (matches_any_rule and not already_processed):
                Processor._processed.add(process_entry)
    @staticmethod
    def nice(pid, priority):
        ''' renice given process to given priority '''
        try:
            process = psutil.Process(pid)
            process.nice(priority)
            return True
        except Exception:
            return False
    @staticmethod
    def ionice(pid, io_class, io_nice):
        ''' ionice given process to given IO class and optional class data '''
        try:
            cmd = ['ionice', '-p', str(pid), '-c', str(io_class)]
            if (io_nice is not None):
                cmd.append(['-n', str(io_nice)])
            subprocess.run(cmd, check = True)
        except Exception:
            return False
        return True
    @staticmethod
    def oom(pid, oom):
        ''' adjust process protection from OOM killer, see proc(5) '''
        try:
            with open(
                f'/proc/{pid}/oom_score_adj', 'w', encoding = 'utf-8'
            ) as file:
                file.write(Processor.oom_as_oom_score_adj(oom))
        except Exception:
            try:
                with open(
                    f'/proc/{pid}/oom_adj', 'w', encoding = 'utf-8'
                ) as file:
                    file.write(Processor.oom_as_oom_adj(oom))
            except Exception:
                return False
        return True
    @staticmethod
    def oom_as_oom_score_adj(oom):
        ''' return given oom value as one usable for oom_score_adj '''
        if isinstance(oom, float):
            return int(oom)
        return Processor.convert_to_oom_score_adj(oom)
    @staticmethod
    def oom_as_oom_adj(oom):
        ''' return given oom value as one usable for oom_adj '''
        if isinstance(oom, float):
            return Processor.convert_to_oom_adj(oom)
        return oom
    @staticmethod
    def convert_to_oom_score_adj(oom_adj):
        ''' convert value from oom_adj to oom_score_adj range '''
        return int(convert_range(oom_adj, -17, 15, -1000, 1000))
    @staticmethod
    def convert_to_oom_adj(oom_score_adj):
        ''' convert value from oom_score_adj to oom_adj range '''
        return int(convert_range(oom_score_adj, -1000, 1000, -17, 15))

class FullScanThread():
    ''' thread periodically scanning full process tree '''
    @staticmethod
    def scan():
        ''' scan full process tree '''
        log(VERBOSE_YES)('Full scan...')
        pids = psutil.pids()
        for pid in pids:
            try:
                command = ' '.join(psutil.Process(pid).cmdline())
                process_entry = ProcessEntry(pid, command)
                if (process_entry.pid and process_entry.command):
                    Processor.handle_process_entry(process_entry)
            except psutil.NoSuchProcess:
                pass
            except Exception as exception:
                log()(exception)
        Processor.cleanup_dead(pids)
        log(VERBOSE_YES)('Full scan done')
    @staticmethod
    def _scanning():
        ''' periodically scan full process tree '''
        while (True):
            try:
                FullScanThread.scan()
            except Exception as exception:
                log()(exception)
            time.sleep(int(Config.full_scan_interval))
    @staticmethod
    def start():
        ''' start the full-scan thread in the background '''
        thread = threading.Thread(
            target = FullScanThread._scanning,
            daemon = True
        )
        thread.start()

def log(verbosity_level = -math.inf):
    ''' return log handler for given verbosity: eprint() or noop() '''
    if (Config.verbosity(verbosity_level)):
        return eprint
    return noop

def int_or_none(string):
    ''' convert string to int or return None in case of error '''
    try:
        return int(string)
    except Exception:
        return None

def convert_range(value1, min1, max1, min2, max2):
    ''' convert value from one range to another keeping its ratio '''
    range1 = max1 - min1
    range2 = max2 - min2
    return min2 + ((value1 - min1) * range2 / range1)

def sig_exit(sig, frame):
    ''' exit on received signal '''
    del sig, frame
    log(VERBOSE_QUIET)('Exiting...')
    sys.exit(0)

def sig_pdb(sig, frame):
    ''' run Python Debugger on received signal '''
    del sig
    pdb.Pdb().set_trace(frame)

def arguments():
    ''' parse command line arguments '''
    parser = argparse.ArgumentParser(
        prog = PROGRAM,
        description = 'a daemon renicing new and existing processes'
    )
    parser.add_argument(
        '-v', '--version',
        action='store_true',
        help = 'display current version and exit'
    )
    parser.add_argument(
        '--config-file',
        metavar='PATH',
        help = f'use given configuration file instead of {DEFAULT_CONFIG_PATH}'
    )
    args = parser.parse_args()
    if (args.version):
        log()(f'{PROGRAM} {VERSION}')
        sys.exit(0)
    if (args.config_file is not None):
        Config.path = args.config_file

def main():
    ''' main entry point '''
    signal.signal(signal.SIGINT,  sig_exit)
    signal.signal(signal.SIGTERM, sig_exit)
    signal.signal(signal.SIGCONT, sig_exit)
    signal.signal(signal.SIGUSR1, sig_pdb)
    arguments()
    log(VERBOSE_QUIET)('Starting...')
    Config.load()
    FullScanThread.start()
    Processor.run()  # main loop
    sys.exit(1)

if (__name__ == '__main__'):
    main()
